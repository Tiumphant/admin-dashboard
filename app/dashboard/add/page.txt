'use client';
import React, { useState } from 'react';

interface FormData {
  name: string;
  email: string;
  street: string;
  city: string;
  zip: string;
}

export default function AddUserPage() {
  const [step, setStep] = useState(1);
  const [form, setForm] = useState<FormData>({
    name: '',
    email: '',
    street: '',
    city: '',
    zip: ''
  });
  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const validateStep = () => {
    const newErrors: { [key: string]: string } = {};
    if (step === 1) {
      if (!form.name) newErrors.name = 'Name required';
      if (!form.email) newErrors.email = 'Email required';
      else if (!/\S+@\S+\.\S+/.test(form.email)) newErrors.email = 'Invalid email';
    } else if (step === 2) {
      if (!form.street) newErrors.street = 'Street required';
      if (!form.city) newErrors.city = 'City required';
      if (!form.zip) newErrors.zip = 'Zip required';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (validateStep()) setStep(step + 1);
  };

  const handlePrev = () => setStep(step - 1);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) =>
    setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = () => {
    if (validateStep()) {
      console.log('Submitted:', form);
      alert('User added successfully!');
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-xl font-bold mb-4">Add New User</h1>

      {step === 1 && (
        <>
          <input name="name" placeholder="Name" value={form.name} onChange={handleChange} className="block mb-2 border p-2 w-full" />
          {errors.name && <p className="text-red-500">{errors.name}</p>}
          <input name="email" placeholder="Email" value={form.email} onChange={handleChange} className="block mb-2 border p-2 w-full" />
          {errors.email && <p className="text-red-500">{errors.email}</p>}
        </>
      )}

      {step === 2 && (
        <>
          <input name="street" placeholder="Street" value={form.street} onChange={handleChange} className="block mb-2 border p-2 w-full" />
          {errors.street && <p className="text-red-500">{errors.street}</p>}
          <input name="city" placeholder="City" value={form.city} onChange={handleChange} className="block mb-2 border p-2 w-full" />
          {errors.city && <p className="text-red-500">{errors.city}</p>}
          <input name="zip" placeholder="ZIP" value={form.zip} onChange={handleChange} className="block mb-2 border p-2 w-full" />
          {errors.zip && <p className="text-red-500">{errors.zip}</p>}
        </>
      )}

      {step === 3 && (
        <div className="border p-4 rounded bg-gray-100">
          <p><strong>Name:</strong> {form.name}</p>
          <p><strong>Email:</strong> {form.email}</p>
          <p><strong>Street:</strong> {form.street}</p>
          <p><strong>City:</strong> {form.city}</p>
          <p><strong>ZIP:</strong> {form.zip}</p>
        </div>
      )}

      <div className="mt-4 space-x-2">
        {step > 1 && <button onClick={handlePrev} className="px-4 py-2 bg-gray-300 rounded">Back</button>}
        {step < 3 && <button onClick={handleNext} className="px-4 py-2 bg-blue-500 text-white rounded">Next</button>}
        {step === 3 && <button onClick={handleSubmit} className="px-4 py-2 bg-green-600 text-white rounded">Submit</button>}
      </div>
    </div>
  );
}
